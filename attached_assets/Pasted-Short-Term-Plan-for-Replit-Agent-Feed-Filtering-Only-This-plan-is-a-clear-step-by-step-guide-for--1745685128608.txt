Short-Term Plan for Replit Agent: Feed Filtering Only
This plan is a clear, step-by-step guide for your Replit agent to implement filtered feeds (followers, follows, trendy) in the Nodus app’s client directory using @nostr-dev-kit/ndk-hooks. It modifies only useNodusPosts.ts and Home.tsx, with an optional relay check in App.tsx. The plan ensures simplicity to avoid overwhelming the agent and includes testing in the Replit preview and committing to GitHub.
Timeline: 1-2 days
Goals:
Add filter modes to useNodusPosts.ts using useSubscribe.

Update Home.tsx with a filter selector UI.

Ensure relays support feed fetching.

Test filters in Replit preview.

Commit changes to GitHub.
Step 1: Modify useNodusPosts.ts to Support Filtered Feeds
Objective: Update useNodusPosts to fetch posts based on filter modes (all, followers, follows, trendy).
Tasks:
Open useNodusPosts.ts:
In Replit, navigate to client/src/hooks/useNodusPosts.ts.
Replace the File Content:
Add filter modes, fetch follows, and rank trendy posts using useSubscribe.
javascript
// client/src/hooks/useNodusPosts.ts
import { useNDK, useSubscribe } from '@nostr-dev-kit/ndk-hooks';
import { useState, useEffect, useContext } from 'react';
import { NDKEvent } from '@nostr-dev-kit/ndk';
import { DB } from '@/lib/db';
import { AuthContext } from '@/contexts/AuthContext';

interface Post extends NDKEvent {
  id: string;
  pubkey: string;
  content: string;
  created_at: number;
  tags: string[][];
}

type FilterMode = 'all' | 'followers' | 'follows' | 'trendy';

export function useNodusPosts(filterMode: FilterMode = 'all') {
  const { ndk } = useNDK();
  const { user } = useContext(AuthContext);
  const [verifiedPosts, setVerifiedPosts] = useState<Post[]>([]);
  const [error, setError] = useState<string | null>(null);
  const db = new DB();

  // Fetch user follows
  const [follows, setFollows] = useState<string[]>([]);
  const { events: followEvents } = useSubscribe({
    filter: { kinds: [3], authors: user ? [user.pubkey] : [] },
    enabled: !!ndk && !!user
  });

  useEffect(() => {
    if (followEvents.length > 0) {
      const followPubkeys = followEvents[0].tags
        .filter(tag => tag[0] === 'p')
        .map(tag => tag[1]);
      setFollows(followPubkeys);
      console.log('Follows:', followPubkeys); // Debug
    }
  }, [followEvents]);

  // Fetch follows of follows
  const [followsOfFollows, setFollowsOfFollows] = useState<string[]>([]);
  const { events: followsOfFollowsEvents } = useSubscribe({
    filter: { kinds: [3], authors: follows },
    enabled: !!ndk && follows.length > 0 && filterMode === 'follows'
  });

  useEffect(() => {
    if (followsOfFollowsEvents.length > 0) {
      const secondDegreePubkeys = followsOfFollowsEvents
        .flatMap(event => event.tags.filter(tag => tag[0] === 'p').map(tag => tag[1]))
        .filter((pubkey, index, self) => self.indexOf(pubkey) === index);
      setFollowsOfFollows(secondDegreePubkeys);
      console.log('Follows of follows:', secondDegreePubkeys); // Debug
    }
  }, [followsOfFollowsEvents]);

  // Fetch posts
  const getPostFilter = () => {
    switch (filterMode) {
      case 'followers':
        return { kinds: [1], authors: follows, limit: 50 };
      case 'follows':
        return { kinds: [1], authors: followsOfFollows, limit: 50 };
      case 'trendy':
        return { kinds: [1], limit: 50, since: Math.floor(Date.now() / 1000) - 24 * 3600 };
      default:
        return { kinds: [1], limit: 50 };
    }
  };

  const { events: postEvents } = useSubscribe({
    filter: getPostFilter(),
    enabled: !!ndk && (filterMode !== 'follows' || followsOfFollows.length > 0)
  });

  // Fetch engagement for trendy feed
  const { events: engagementEvents } = useSubscribe({
    filter: { kinds: [6, 7], limit: 1000, since: Math.floor(Date.now() / 1000) - 24 * 3600 },
    enabled: !!ndk && filterMode === 'trendy'
  });

  // Process posts
  useEffect(() => {
    const filterPosts = async () => {
      let filteredPosts: Post[] = [];
      for (const event of postEvents) {
        const isVerified = await db.isNip05Verified(event.pubkey, ndk);
        if (isVerified) filteredPosts.push(event as Post);
      }

      if (filterMode === 'trendy') {
        const engagementCounts = engagementEvents.reduce((acc, event) => {
          const postId = event.tags.find(tag => tag[0] === 'e')?.[1];
          if (postId) acc[postId] = (acc[postId] || 0) + 1;
          return acc;
        }, {} as Record<string, number>);

        filteredPosts = filteredPosts
          .map(post => ({
            ...post,
            engagement: engagementCounts[post.id] || 0
          }))
          .sort((a, b) => b.engagement - a.engagement)
          .slice(0, 50);
      }

      setVerifiedPosts(filteredPosts);
      console.log('Filtered posts:', filteredPosts); // Debug
    };
    filterPosts().catch(err => setError('Failed to filter posts: ' + err.message));
  }, [postEvents, engagementEvents, ndk, filterMode]);

  return { posts: verifiedPosts, error };
}

Notes:
Uses useNDK and useSubscribe from @nostr-dev-kit/ndk-hooks.

Assumes AuthContext provides ndk and user (with user.pubkey).

Maintains NIP-05 verification via db.ts.

Adds debug logs for follows, follows of follows, and posts.

Ignores existing functions (e.g., createPost, likePost) to focus on filtering.

If your useNodusPosts.ts has other functions, append this filtering logic without removing them.
Testing in Replit:
Run npm start and open the preview.

Check the console (browser DevTools, F12) for:
“Follows: [...]” (after login).

“Follows of follows: [...]” (when selecting “follows” filter, added in Step 2).

“Filtered posts: [...]” (when posts load).
Note: Filter selection requires Home.tsx update.
Step 2: Update Home.tsx to Add Filter Selector
Objective: Add a dropdown to switch between filter modes.
Tasks:
Open Home.tsx:
Navigate to client/src/pages/Home.tsx.
Replace the File Content:
Add a <select> dropdown for filter modes.
javascript
// client/src/pages/Home.tsx
import { useContext, useState } from 'react';
import { AuthContext } from '@/contexts/AuthContext';
import { useNodusPosts } from '@/hooks/useNodusPosts';
import { PostCard } from '@/components/feed/PostCard';
import { Login } from '@/components/Login';
import { OfflineIndicator } from '@/components/OfflineIndicator';

export const Home = () => {
  const { user, error: authError } = useContext(AuthContext);
  const [filterMode, setFilterMode] = useState<'all' | 'followers' | 'follows' | 'trendy'>('all');
  const { posts, error: postError } = useNodusPosts(filterMode);

  return (
    <div>
      <h1>Nodus Feed</h1>
      <OfflineIndicator />
      {authError && <p style={{ color: 'red' }}>{authError}</p>}
      {postError && <p style={{ color: 'red' }}>{postError}</p>}
      <div>
        <label>Filter: </label>
        <select value={filterMode} onChange={e => setFilterMode(e.target.value as any)}>
          <option value="all">All Posts</option>
          <option value="followers">Followers</option>
          <option value="follows">Follows of Follows</option>
          <option value="trendy">Trendy</option>
        </select>
      </div>
      {!user && <Login />}
      {user && (
        <ul>
          {posts.map(post => (
            <PostCard key={post.id} post={post} />
          ))}
        </ul>
      )}
    </div>
  );
};

Notes:
Assumes PostCard, Login, and OfflineIndicator exist and work.

Displays errors for debugging.

Requires login for followers/follows filters.
Testing in Replit:
Run npm start and open the preview.

Log in using a private key or generate a new keypair (via Login.tsx).

Test each filter mode in the dropdown:
All: Shows all NIP-05 verified kind 1 posts.

Followers: Shows posts from users in your kind 3 contact list (requires follows).

Follows of Follows: Shows posts from second-degree follows.

Trendy: Shows recent posts (past 24 hours) sorted by likes/reposts.
Check the console for:
“Follows: [...]” (non-empty after login).

“Follows of follows: [...]” (non-empty for “follows” filter).

“Filtered posts: [...]” (posts matching the filter).
If no posts appear:
Ensure login (followers/follows need user.pubkey).

Check for errors like “Failed to filter posts” in the UI/console.
Step 3: Verify Relays in App.tsx
Objective: Ensure relays support kind 3, 1, 7, and 6 events in Replit.
Tasks:
Open App.tsx:
Navigate to client/src/App.tsx.
Check and Update Relays:
Verify NDKProvider uses reliable relays. If not, update:
javascript
// client/src/App.tsx
import { NDKProvider } from '@nostr-dev-kit/ndk-hooks';
import { AuthProvider } from '@/contexts/AuthContext';
import { Router } from '@/Router';
import { WebSocket } from 'ws';

global.WebSocket = WebSocket;

export const App = () => (
  <NDKProvider relayUrls={[
    'wss://relay.mynodus.com',
    'wss://relay.damus.io',
    'wss://relay.nostr.info'
  ]}>
    <AuthProvider>
      <Router />
    </AuthProvider>
  </NDKProvider>
);
Notes:
Only update if existing relays are unreliable (e.g., wss://relay.nostr.band).

Assumes AuthProvider accepts children without an ndk prop; adjust if your AuthProvider requires ndk explicitly (e.g., <AuthProvider ndk={ndk}>).
Testing in Replit:
Run npm start and open the preview.

Check the console for “NDK connected to relays: [...]” or similar logs (may depend on ndk.ts).

If no posts load:
Test relay connectivity:
bash
node -e "const WebSocket = require('ws'); const ws = new WebSocket('wss://relay.mynodus.com'); ws.on('open', () => { console.log('Connected'); ws.close(); }); ws.on('error', e => console.error('Error:', e));"
If it fails, add wss://relay.nostr.wine to relayUrls and retest.
Step 4: Commit and Test in Replit Preview
Objective: Save changes, test filters, and push to GitHub.
Tasks:
Commit Changes:
bash
cd client
git add .
git commit -m "Add filtered feeds (followers, follows, trendy) in Replit"
git push origin main
Test in Replit Preview:
Run npm start and open the preview.

Log in using a private key or generate a new keypair.

Test each filter mode:
All: All NIP-05 verified kind 1 posts.

Followers: Posts from kind 3 contact list (requires follows).

Follows of Follows: Posts from second-degree follows.

Trendy: Recent posts sorted by likes/reposts.
Check the console (DevTools, F12) for:
“Follows: [...]” (non-empty after login).

“Follows of follows: [...]” (non-empty for “follows” filter).

“Filtered posts: [...]” (posts matching the filter).
Verify posts load and filters switch without errors.
Debug Issues:
No Posts:
Ensure login (check user.pubkey in console: console.log('User:', user) in useNodusPosts.ts).

Check for empty follows: console.log('Follow events:', followEvents).

Verify relays support kind 3/1/7/6 events.
Relays Fail:
Check console for relay logs.

Test relays (see Step 3).
Errors:
Look for “Failed to filter posts” in UI/console.

Add debug: console.log('Post events:', postEvents) in useNodusPosts.ts.
Testing in Replit:
Confirm all filter modes show relevant posts.

Ensure filter switching updates the feed.

Verify no blank feeds or crashes.
Recommendations for Replit Agent
Focus: Modify only useNodusPosts.ts, Home.tsx, and App.tsx (if needed). Do not create FeedFilters.tsx or touch other files.

NDK Hooks: Uses useNDK and useSubscribe from @nostr-dev-kit/ndk-hooks as per your package.json.

Debugging:
Log filters: console.log('Filter:', getPostFilter()).

Log posts: console.log('Posts loaded:', verifiedPosts).

Check relays: console.log('Relays:', Array.from(ndk.pool.relays.entries())).

Ensure your Nostr account has a kind 3 event with p tags (follows) for followers/follows filters.
Replit Tips:
Restart server if preview is slow: kill 1, then npm start.

Use browser DevTools (F12) for console logs.
Post-Implementation Steps
Verify in Replit:
Test all filter modes.

Confirm posts load and filters switch.

Check console for logs/errors.
Push to GitHub:
Commit and push (Step 4).
Debug:
If filters fail, check follows, followsOfFollows, and postEvents in console.

If relays fail, try wss://relay.nostr.wine.
