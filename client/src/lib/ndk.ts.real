import NDK, { NDKEvent, NDKFilter, NDKPrivateKeySigner, NDKRelay, NDKRelaySet, NDKSubscription, NDKUser } from '@nostr-dev-kit/ndk';
import { EventKind, NostrEvent, NostrProfile, NostrUser, createEventId, decryptMessage, encryptMessage, generateKeyPair, importKeyFromNsec, signEvent } from './nostr';
import { db } from './db';

// Singleton NDK instance
let ndkInstance: NDK | null = null;

// NDK Options
const ndkOptions = {
  explicitRelayUrls: [
    'wss://relay.damus.io',
    'wss://relay.nostr.band',
    'wss://nos.lol',
    'wss://relay.current.fyi',
    'wss://nostr.wine'
  ],
  autoConnectUserRelays: true,
  autoFetchUserMutelist: true,
  enableOutboxModel: true // Important for offline functionality
};

/**
 * Get the NDK instance, creating and connecting to it if necessary
 */
export const getNDK = async (): Promise<NDK> => {
  if (!ndkInstance) {
    // Create a new NDK instance
    ndkInstance = new NDK(ndkOptions);
    
    try {
      // Connect to relays
      await ndkInstance.connect();
      console.log('NDK connected to relays');
      
      // Restore user if we have them in local storage
      const storedUser = await db.getCurrentUser();
      if (storedUser && storedUser.privateKey) {
        // Create signer and sign in
        const signer = new NDKPrivateKeySigner(storedUser.privateKey);
        ndkInstance.signer = signer;
        console.log('Restored user from local storage');
      }
    } catch (e) {
      console.error('Failed to connect NDK:', e);
      // Even if connection fails, return the instance so we can use it later
    }
  }
  
  return ndkInstance;
};

/**
 * Sign in with a private key
 */
export const loginWithPrivateKey = async (privateKey: string): Promise<NostrUser> => {
  try {
    // Get NDK instance
    const ndk = await getNDK();
    
    // Create signer and sign in
    const signer = new NDKPrivateKeySigner(privateKey);
    ndk.signer = signer;
    
    // Get public key
    const ndkUser = await ndk.signer.user();
    const publicKey = ndkUser.pubkey;
    
    // Convert to our User type
    const user: NostrUser = {
      publicKey,
      privateKey,
      npub: ndkUser.npub,
      nsec: privateKey, // Store the private key securely
    };
    
    // Store in local database
    await db.storeCurrentUser(user);
    
    console.log('User logged in:', user.npub);
    
    return user;
    
  } catch (error) {
    console.error('Failed to login with private key:', error);
    throw error;
  }
};

/**
 * Generate a new user with keypair
 */
export const generateNewUser = async (): Promise<NostrUser> => {
  try {
    // Generate key pair using our helper
    const user = generateKeyPair();
    
    // Create new NDK User
    const ndk = await getNDK();
    const signer = new NDKPrivateKeySigner(user.privateKey!);
    ndk.signer = signer;
    
    // Create a placeholder profile for the new user
    const now = Math.floor(Date.now() / 1000);
    
    const nostrUser: NostrUser = {
      publicKey: user.publicKey,
      privateKey: user.privateKey,
      npub: user.npub,
      nsec: user.nsec,
      profile: {
        name: `Nodus User ${now.toString().substring(5)}`,
        about: 'I just joined Nodus!',
      }
    };
    
    // Store user in local database
    await db.storeCurrentUser(nostrUser);
    
    // If we're online, try to publish profile
    try {
      await updateUserProfile(user.publicKey, nostrUser.profile!);
    } catch (e) {
      console.warn('Failed to publish new user profile. Will try again when online.');
    }
    
    return nostrUser;
    
  } catch (error) {
    console.error('Failed to generate new user:', error);
    throw error;
  }
};

/**
 * Fetch a user's profile from the network
 */
export const fetchUserProfile = async (pubkey: string): Promise<NostrProfile | undefined> => {
  try {
    // Check cache first
    const cachedProfile = await db.getProfile(pubkey);
    if (cachedProfile) {
      return cachedProfile;
    }
    
    // Fetch from network
    const ndk = await getNDK();
    const ndkUser = new NDKUser({ pubkey });
    await ndkUser.fetchProfile();
    
    if (!ndkUser.profile) {
      return undefined;
    }
    
    // Convert to our profile type
    const profile: NostrProfile = {
      name: ndkUser.profile.name,
      about: ndkUser.profile.about,
      picture: ndkUser.profile.image,
      nip05: ndkUser.profile.nip05,
    };
    
    // Store in cache
    await db.storeProfile(pubkey, profile);
    
    return profile;
    
  } catch (error) {
    console.error(`Failed to fetch profile for ${pubkey}:`, error);
    return undefined;
  }
};

/**
 * Update a user's profile
 */
export const updateUserProfile = async (pubkey: string, profile: NostrProfile): Promise<boolean> => {
  try {
    const ndk = await getNDK();
    
    // Make sure we're signed in
    if (!ndk.signer) {
      throw new Error('Not signed in');
    }
    
    // Create event content
    const content = JSON.stringify({
      name: profile.name,
      about: profile.about,
      picture: profile.picture,
      nip05: profile.nip05,
    });
    
    // Create the profile event
    const event = new NDKEvent(ndk);
    event.kind = EventKind.SET_METADATA;
    event.content = content;
    
    // Publish to relays
    await event.publish();
    
    // Store to local cache
    await db.storeProfile(pubkey, profile);
    
    return true;
    
  } catch (error) {
    console.error('Failed to update profile:', error);
    return false;
  }
};

/**
 * Create and publish a text note
 */
export const publishNote = async (content: string, tags: string[][] = []): Promise<NostrEvent | null> => {
  try {
    const ndk = await getNDK();
    
    // Make sure we're signed in
    if (!ndk.signer) {
      throw new Error('Not signed in');
    }
    
    // Create the note event
    const event = new NDKEvent(ndk);
    event.kind = EventKind.TEXT_NOTE;
    event.content = content;
    if (tags.length > 0) {
      tags.forEach(tag => event.tags.push(tag));
    }
    
    // Publish to relays
    await event.publish();
    
    // Convert to our event type
    const nostrEvent: NostrEvent = {
      id: event.id,
      pubkey: event.pubkey,
      created_at: event.created_at,
      kind: event.kind,
      tags: event.tags,
      content: event.content,
      sig: event.sig || '',
    };
    
    // Store to local database
    await db.storeEvent(nostrEvent);
    
    return nostrEvent;
    
  } catch (error) {
    console.error('Failed to publish note:', error);
    return null;
  }
};

/**
 * Fetch recent notes from the network
 */
export const fetchNotes = async (limit: number = 50): Promise<NostrEvent[]> => {
  try {
    const ndk = await getNDK();
    
    // Create filter
    const filter: NDKFilter = {
      kinds: [EventKind.TEXT_NOTE],
      limit: limit,
    };
    
    // Fetch events
    const events = await ndk.fetchEvents(filter);
    
    // Convert to our event type
    const notes: NostrEvent[] = [];
    for (const event of events) {
      const note: NostrEvent = {
        id: event.id,
        pubkey: event.pubkey,
        created_at: event.created_at,
        kind: event.kind,
        tags: event.tags,
        content: event.content,
        sig: event.sig || '',
      };
      
      // Store to local database
      await db.storeEvent(note);
      
      notes.push(note);
    }
    
    return notes;
    
  } catch (error) {
    console.error('Failed to fetch notes:', error);
    
    // If offline or error, return cached events
    try {
      const cachedEvents = await db.getEventsByKind(EventKind.TEXT_NOTE, limit);
      return cachedEvents;
    } catch (e) {
      console.error('Failed to fetch cached events:', e);
      return [];
    }
  }
};

/**
 * Send a direct message to a user
 */
export const sendMessage = async (receiverPubkey: string, content: string): Promise<NostrEvent | null> => {
  try {
    const ndk = await getNDK();
    
    // Make sure we're signed in
    if (!ndk.signer) {
      throw new Error('Not signed in');
    }
    
    // Get the sender pubkey
    const ndkUser = await ndk.signer.user();
    const senderPubkey = ndkUser.pubkey;
    
    // Encrypt the message content
    const encryptedContent = await encryptMessage(content, senderPubkey, receiverPubkey);
    
    // Create the message event
    const event = new NDKEvent(ndk);
    event.kind = EventKind.ENCRYPTED_DIRECT_MESSAGE;
    event.content = encryptedContent;
    event.tags = [['p', receiverPubkey]];
    
    // Publish to relays
    await event.publish();
    
    // Convert to our event type
    const message: NostrEvent = {
      id: event.id,
      pubkey: event.pubkey,
      created_at: event.created_at,
      kind: event.kind,
      tags: event.tags,
      content: event.content,
      sig: event.sig || '',
    };
    
    // Store to local database
    await db.storeEvent(message);
    
    return message;
    
  } catch (error) {
    console.error('Failed to send message:', error);
    return null;
  }
};

/**
 * Fetch messages between the current user and another user
 */
export const fetchMessages = async (otherPubkey: string): Promise<NostrEvent[]> => {
  try {
    const ndk = await getNDK();
    
    // Make sure we're signed in
    if (!ndk.signer) {
      throw new Error('Not signed in');
    }
    
    // Get the current user pubkey
    const ndkUser = await ndk.signer.user();
    const userPubkey = ndkUser.pubkey;
    
    // Create filter for messages TO the current user FROM the other user
    const filter: NDKFilter = {
      kinds: [EventKind.ENCRYPTED_DIRECT_MESSAGE],
      authors: [otherPubkey],
      '#p': [userPubkey],
    };
    
    // Create filter for messages FROM the current user TO the other user
    const filter2: NDKFilter = {
      kinds: [EventKind.ENCRYPTED_DIRECT_MESSAGE],
      authors: [userPubkey],
      '#p': [otherPubkey],
    };
    
    // Fetch events
    const events1 = await ndk.fetchEvents(filter);
    const events2 = await ndk.fetchEvents(filter2);
    
    // Combine and sort by created_at
    const allEvents = [...events1, ...events2].sort((a, b) => a.created_at - b.created_at);
    
    // Convert to our event type
    const messages: NostrEvent[] = [];
    for (const event of allEvents) {
      const message: NostrEvent = {
        id: event.id,
        pubkey: event.pubkey,
        created_at: event.created_at,
        kind: event.kind,
        tags: event.tags,
        content: event.content,
        sig: event.sig || '',
      };
      
      // Store to local database
      await db.storeEvent(message);
      
      messages.push(message);
    }
    
    return messages;
    
  } catch (error) {
    console.error(`Failed to fetch messages with ${otherPubkey}:`, error);
    
    // If offline or error, return cached events
    try {
      const cachedEvents = await db.getEventsByPubkey(otherPubkey, 100);
      return cachedEvents.filter(e => e.kind === EventKind.ENCRYPTED_DIRECT_MESSAGE);
    } catch (e) {
      console.error('Failed to fetch cached messages:', e);
      return [];
    }
  }
};

/**
 * Create a live subscription to new notes
 */
export const subscribeToNotes = (
  onEvent: (event: NostrEvent) => void,
  onEose?: () => void,
): NDKSubscription => {
  const ndk = ndkInstance;
  if (!ndk) {
    throw new Error('NDK not initialized');
  }
  
  // Create filter
  const filter: NDKFilter = { kinds: [EventKind.TEXT_NOTE] };
  
  // Create subscription
  const subscription = ndk.subscribe(filter);
  
  // Set up event handler
  subscription.on('event', (ndkEvent: NDKEvent) => {
    const event: NostrEvent = {
      id: ndkEvent.id,
      pubkey: ndkEvent.pubkey,
      created_at: ndkEvent.created_at,
      kind: ndkEvent.kind,
      tags: ndkEvent.tags,
      content: ndkEvent.content,
      sig: ndkEvent.sig || '',
    };
    
    // Store to local database
    db.storeEvent(event).catch(e => console.error('Failed to store event:', e));
    
    // Call the event handler
    onEvent(event);
  });
  
  // Set up EOSE handler
  if (onEose) {
    subscription.on('eose', onEose);
  }
  
  return subscription;
};

/**
 * Get relay status for debugging
 */
export const getRelayStatus = async (): Promise<{url: string, connected: boolean}[]> => {
  const ndk = await getNDK();
  
  // Get all relays
  const relayStatus = Array.from(ndk.pool.relays.values()).map((relay: NDKRelay) => ({
    url: relay.url,
    connected: relay.connected,
  }));
  
  return relayStatus;
};

/**
 * Add a relay to NDK
 */
export const addRelayToNDK = async (url: string): Promise<boolean> => {
  try {
    const ndk = await getNDK();
    
    // Check if relay already exists
    if (ndk.pool.relays.has(url)) {
      console.log(`Relay already exists in pool: ${url}`);
      
      // Try to reconnect
      const relay = ndk.pool.relays.get(url);
      if (relay && !relay.connected) {
        try {
          await relay.connect();
          console.log(`Reconnected to relay: ${url}`);
        } catch (e) {
          console.error(`Failed to reconnect to relay ${url}:`, e);
        }
      }
      
      return true;
    }
    
    // Try to add the relay to the NDK instance
    try {
      // Add to explicit relay URLs if needed
      if (!ndk.explicitRelayUrls.includes(url)) {
        ndk.explicitRelayUrls.push(url);
      }
      
      // Create a relay and add to pool
      const relay = new NDKRelay(url);
      ndk.pool.relays.set(url, relay);
      
      // Connect to the relay
      try {
        await relay.connect();
        console.log(`Connected to relay: ${url}`);
      } catch (e) {
        console.error(`Failed to connect to relay ${url}:`, e);
      }
      
      return true;
    } catch (error) {
      console.error(`Failed to add relay ${url}:`, error);
      return false;
    }
  } catch (error) {
    console.error("Error adding relay to NDK:", error);
    return false;
  }
};

/**
 * Remove a relay from NDK
 */
export const removeRelayFromNDK = async (url: string): Promise<boolean> => {
  try {
    const ndk = await getNDK();
    
    // Remove from explicit relays
    ndk.explicitRelayUrls = ndk.explicitRelayUrls.filter(u => u !== url);
    
    // Get the relay from pool
    const relay = ndk.pool.relays.get(url);
    
    if (relay) {
      // Try to disconnect
      if (relay.connected) {
        try {
          await relay.disconnect();
        } catch (e) {
          console.error(`Error disconnecting from relay ${url}:`, e);
        }
      }
      
      // Remove from pool
      ndk.pool.relays.delete(url);
    }
    
    return true;
  } catch (error) {
    console.error("Error removing relay from NDK:", error);
    return false;
  }
};